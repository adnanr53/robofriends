{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","item","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAwBeA,EAtBF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAE5B,OAEC,yBAAKC,UAAU,uDAEd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBAErB,6BAEC,4BAAKF,GAEL,2BAAIC,MCiCOK,EA1CE,SAAC,GAAkB,IAAfC,EAAc,EAAdA,OAQpB,OAEC,6BAIKA,EAAOC,KAAK,SAACC,EAAMC,GAErB,OAEC,kBAAC,EAAD,CAECC,IAAKD,EAELR,GAAIO,EAAKP,GAETF,KAAMS,EAAKT,KAEXC,MAAOQ,EAAKR,aCLJW,EAxBG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAEnB,OAEC,yBAAKV,UAAY,OAEhB,2BAECA,UAAY,mCAEZW,KAAO,SAEPC,YAAc,gBAEdC,SAAYH,MCADI,EAdA,SAACC,GAEf,OAEC,yBAAKC,MAAO,CAAC,UAAY,SAAU,OAAS,QAAS,OAAS,oBAE5DD,EAAME,WC4BKC,E,kDAhCd,WAAYH,GAAO,IAAD,8BAEjB,cAAMA,IAEDI,MAAQ,CAEZC,UAAW,GANK,E,8DAYCC,EAAQC,GAE1BC,KAAKC,SAAS,CAAEJ,UAAW,M,+BAM3B,OAAIG,KAAKJ,MAAMC,SAEP,yDAIDG,KAAKR,MAAME,a,GA5BOQ,aCsFZC,G,wDA1Ed,aAAc,IAAD,8BAEZ,gBAkBDC,eAAiB,SAACC,GAEjB,EAAKJ,SAAS,CAACK,YAAYD,EAAME,OAAOC,SAlBxC,EAAKZ,MAAQ,CAEZf,OAAQ,GAERyB,YAAa,IARF,E,gEAcO,IAAD,OAClBG,MAAM,8CACJC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACpB,OAAOgC,S,+BAS/B,IAAD,EAEyBb,KAAKJ,MAA7Bf,EAFD,EAECA,OAAQyB,EAFT,EAESA,YAEVQ,EAAiBjC,EAAOkC,QAAO,SAAAC,GAEpC,OAAOA,EAAM1C,KAAK2C,cAAcC,SAASZ,EAAYW,kBAItD,OAASpC,EAAOsC,OAMf,yBAAK1C,UAAY,MAEhB,wBAAIA,UAAU,MAAd,eAEA,kBAAC,EAAD,CAAWU,aAAca,KAAKI,iBAE9B,kBAAC,EAAD,KAEC,kBAAC,EAAD,KAEC,kBAAC,EAAD,CAECvB,OAECiC,OAlBN,2C,GAxCgBZ,cCAEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAER,kBAAC,IAAMC,WAAP,KAEC,kBAAC,EAAD,OAIDC,SAASC,eAAe,SDoHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.5c3e3460.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\r\n\treturn (\r\n\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n\r\n\t\t\t<div>\r\n\r\n\t\t\t\t<h2>{name}</h2>\r\n\r\n\t\t\t\t<p>{email}</p>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\r\n\t);\r\n\r\n}\r\n\r\nexport default Card;","\r\nimport React from 'react';\r\n\r\nimport Card from './Card';\r\n\r\nconst CardList = ( { robots } ) => {\r\n\r\n\tif( false ){\r\n\r\n\t\tthrow new Error('NOOOOOO!');\r\n\r\n\t}\r\n\r\n\treturn (\r\n\r\n\t\t<div>\r\n\t\t\t\r\n\t\t\t{\r\n\t\t\t    \r\n\t\t\t    robots.map( (item, i) => {\r\n\r\n\t\t\t\t\treturn (\r\n\r\n\t\t\t\t\t\t<Card \r\n\r\n\t\t\t\t\t\t\tkey={i} \r\n\r\n\t\t\t\t\t\t\tid={item.id} \r\n\r\n\t\t\t\t\t\t\tname={item.name} \r\n\r\n\t\t\t\t\t\t\temail={item.email}\r\n\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t} )\r\n\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t    </div>\r\n\r\n\t);\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\r\n\treturn (\r\n\r\n\t\t<div className = \"pa2\">\r\n\t\t\t\r\n\t\t\t<input \r\n\r\n\t\t\t\tclassName = \"pa3 ba b--green bg-lightest-blue\"\r\n\r\n\t\t\t\ttype = \"search\" \r\n\r\n\t\t\t\tplaceholder = \"search robots\" \r\n\r\n\t\t\t\tonChange = {searchChange}\r\n\r\n\t\t\t/>\r\n\r\n\t\t</div>\r\n\r\n\t);\r\n\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\r\n\treturn (\r\n\r\n\t\t<div style={{\"overflowY\":\"scroll\", \"height\":\"800px\", \"border\":\"solid 5px black\"}}>\r\n\r\n\t\t\t{props.children}\r\n\r\n\t\t</div>\r\n\r\n\t);\r\n\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n\r\n\tconstructor(props){\r\n\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\r\n\t\t\thasError : false\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tcomponentDidCatch( error , info ) {\r\n\r\n\t\tthis.setState({ hasError : true });\r\n\r\n\t}\r\n\r\n\trender(){\r\n\r\n\t\tif( this.state.hasError ) {\r\n\r\n\t\t\treturn <h1>Oooops. That is not good.</h1>;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.props.children;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\n\r\nimport CardList from '../components/CardList';\r\n\r\nimport SearchBox from '../components/SearchBox';\r\n\r\nimport Scroll from '../components/Scroll';\r\n\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n\tconstructor(){\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.state = {\r\n\r\n\t\t\trobots: [],\r\n\r\n\t\t\tsearchfield: ''\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\r\n\t\t\t.then( response => response.json() )\r\n\t\t\t.then( users => this.setState({robots:users}) );\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\r\n\t\tthis.setState({searchfield:event.target.value});\r\n\r\n\t}\r\n\r\n\trender(){\r\n\r\n\t\tconst { robots, searchfield } = this.state;\r\n\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\r\n\t\t});\r\n\r\n\t\treturn (!robots.length) ?\r\n\r\n\t\t<h1>Loading</h1> :\r\n\t\t\r\n\t\t(\r\n\r\n\t\t\t<div className = \"tc\">\r\n\r\n\t\t\t\t<h1 className=\"f1\">RoboFriends</h1>\r\n\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\r\n\t\t\t\t<Scroll>\r\n\r\n\t\t\t\t\t<ErrorBoundry>\r\n\r\n\t\t\t\t\t\t<CardList \r\n\r\n\t\t\t\t\t\t\trobots = { \r\n\r\n\t\t\t\t\t\t\t\tfilteredRobots \r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t</ErrorBoundry>\r\n\r\n\t\t\t\t</Scroll>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t);\r\n\t\t\r\n\t}\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n\n\t<React.StrictMode>\n\n\t\t<App />\n\n\t</React.StrictMode>,\n\t\n\tdocument.getElementById('root')\n\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}